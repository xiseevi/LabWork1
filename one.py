# Programm one? v0.1
# Махмудовъ Андрей, сынъ Владиміра. 
# Локтіонова, Татьяна, дочь Сергѣя
​# Панина​, Дарья, дочь Даніила 
# Группа 4305, Ленинградскій ордена ​Октяборьской​ революціи и ордена Трудового Краснаго Знамени технологическій институтъ имени ​Ленсовѣта​.

# Список
people = ["Леонид", "Анна", "Михаил"]  # Буквеный
numbers = [1, 2, 3, 4, 5]           # Численый

numbers1 = [5] * 6   # 6 раз повторяем 5
print(numbers1)      # [5, 5, 5, 5, 5, 5]
 
people0 = ["Михаил"] * 3    # 3 раза повторяем "Михаил"
print(people0)           # ["Михаил", "Михаил", "Михаил"]
print(people0[0])   # Леонид
print(people0[1])   # Анна
print(people0[2])   # Михаил

# Минимальное и максимальное значения
# Встроенный функции Python min() и max() позволяют найти минимальное и максимальное значения соответственно:

numbers2 = [9, 21, 12, 1, 3, 15, 18]
print(min(numbers2))     # 1
print(max(numbers2))     # 21

# Соединение списков
# Для объединения списков применяется операция сложения (+):

people1 = ["Леонид", "Анна", "Михаил"]
people2 = ["Леонид", "Коля", "Толя", "Дима"]
people3 = people1 + people2
print(people3)   # ["Леонид", "Анна", "Михаил", "Леонид", "Коля", "Толя", "Дима"]

# Кортеж
tom = ("Леонид", 23)
print(tom)     # ("Леонид", 23)

# Обращение к элементам кортежа
# Обращение к элементам в кортеже происходит также, как и в списке, по индексу. Индексация начинается также с нуля при получении элементов с начала списка и с -1 при получении элементов с конца списка:

man = ("Леонид", 37, "Google", "software developer")
print(man[0])       # Леонид
print(man[1])       # 37
print(man[-1])      # software developer

# Получение подкортежей
# Как и в списках, можно получить часть кортежа в виде другого кортежа

man1 = ("Леонид", 37, "Google", "software developer")
 
# получем подкортеж с 1 по 3 элемента (не включая)
print(man1[1:3])     # (37, "Google")
 
# получем подкортеж с 0 по 3 элемента (не включая)
print(man1[:3])     # ("Леонид", 37, "Google")
 
# получем подкортеж с 1 по послдений элемент
print(man1[1:])     # (37, "Google", "software developer")

# Кортеж как параметр и результат функций
# Особенно удобно использовать кортежи, когда необходимо возвратить из функции сразу несколько значений. Когда функция возвращает несколько значений, фактически она возвращает в кортеж:

def get_user():
    name = "Леонид"
    age = 22
    company = "Google"
    return name, age, company
 
 
user = get_user()
print(user)     # ("Леонид", 37, "Google")

# Перебор кортежей
# Для перебора кортежа можно использовать стандартные циклы for и while. С помощью цикла for:

man2 = ("Леонид", 22, "Google")
for item in man2:
    print(item)

# С помощью цикла while:

man3 = ("Леонид", 22, "Google")
 
i = 0
while i < len(man3):
    print(man3[i])
    i += 1

# Для работы с наборами данных Python предоставляет такие встроенные типы как списки, кортежи и словари.
# Список (list) представляет тип данных, который хранит набор или последовательность элементов. Во многих языках программирования есть аналогичная структура данных, которая называется массив.
# Для создания списка применяются квадратные скобки [], внутри которых через запятую перечисляются элементы списка.
#####################################################################

# Числа
# +
# Сложение двух чисел:

print(6 + 2)  # 8

# -
# Вычитание двух чисел:

print(6 - 2)  # 4

# *
#Умножение двух чисел:

print(6 * 2)  # 12

# /
# Деление двух чисел:

print(6 / 2)  # 3.0

# //
# Целочисленное деление двух чисел:

print(7 / 2)  # 3.5
print(7 // 2)  # 3

#Python поддерживает все распространенные арифметические операции
#####################################################################

# Строки

# \: позволяет добавить внутрь строки слеш

text1 = "Hell\o World"       # Hell\o World
print(text1)

# \': позволяет добавить внутрь строки одинарную кавычку

text2 = "He\'llo World"
print(text2)                 # He'llo World

# \": позволяет добавить внутрь строки двойную кавычку

text3 = "Hello \"World\""
print(text3)                 # Hello "World"

# \n: осуществляет переход на новую строку

text4 = "Hello \nWorld"
print(text4)                 # Hello
                            # World

# \t: добавляет табуляцию (4 отступа)

text5 = "Hello\tWorld"
print(text5)                 # Hello    World
#####################################################################
g = int(input('<=== To be continued...'))
